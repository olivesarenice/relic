diff --git a/.env.example b/.env.example
index 366ff41..47a8dee 100644
--- a/.env.example
+++ b/.env.example
@@ -8,4 +8,11 @@ INGRESS_HOST="ingress"
 GRAPHITI_LLM_API_KEY="****"
 NEO4J_URI="bolt://localhost:7687"
 NEO4J_USER="neo4j"
-NEO4J_PASSWORD="password"
\ No newline at end of file
+NEO4J_PASSWORD="password"
+
+# Postgres
+POSTGRES_USER="user"
+POSTGRES_PASSWORD="password"
+POSTGRES_DB="relic"
+POSTGRES_HOST="localhost"
+POSTGRES_PORT=5432
diff --git a/README.md b/README.md
index a216511..cf672fb 100644
--- a/README.md
+++ b/README.md
@@ -1,5 +1,28 @@
 # relic
 
+Problem: 
+I write and save so many notes and random links all around my devices - phone, laptop, desktop - across different platforms (browser bookmarks, Telegram Saved Messages, Obsidian, Teams Drafts, Journals). Half the time I don't remember the content I've saved.
+
+Solution:
+A living knowledge base that knows what I've saved, when I save it, and why I saved it in context of what I was currently doing at the time.
+
+Tech:
+
+Fusion of 2 types of data:
+- Active notarization - I specifically chose to write about/ save this piece of content.
+- Passive context - I was looking at these X other tabs at work/ home when I decided to create a note.
+
+Data producers exist on the device-side. These "collectors" are installed or accessed per device.
+- Webapp for quickloggings
+- Browser extension for tracking passive context
+
+## Implementation
+
+- [x] Prepared webapp for quicklogging with auth
+- [x] Prepared backend self-hosted server for receiving data event across internet
+- [x] 
+
+## Usage
 Run using
 
     docker-compose down --volumes --remove-orphans && docker-compose up --build
diff --git a/collectors/webapp/script.js b/collectors/webapp/script.js
index 0130b93..149d158 100644
--- a/collectors/webapp/script.js
+++ b/collectors/webapp/script.js
@@ -147,7 +147,12 @@ document.addEventListener('DOMContentLoaded', () => {
         };
 
         try {
-            const response = await fetch(`https://ingress.relic.apps.oliverq.io/send`, {
+            const isLocal = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1' || window.location.hostname === '0.0.0.0';
+            const apiUrl = isLocal
+                ? 'http://localhost:8000/send'
+                : 'https://ingress.relic.apps.oliverq.io/send';
+
+            const response = await fetch(apiUrl, {
                 method: 'POST',
                 headers: {
                     'Content-Type': 'application/json',
diff --git a/core/config.py b/core/config.py
index 69b76eb..390adca 100644
--- a/core/config.py
+++ b/core/config.py
@@ -6,10 +6,16 @@ load_dotenv()
 
 
 INGRESS_CREDENTIALS = {os.getenv("CLIENT_ID"): os.getenv("CLIENT_API_KEY")}
-REDIS_HOST = os.getenv("REDIS_HOST", "localhost")
+REDIS_HOST = os.getenv("REDIS_HOST")
 REDIS_PORT = int(os.getenv("REDIS_PORT", 6379))
 
 GRAPHITI_LLM_API_KEY = os.getenv("GRAPHITI_LLM_API_KEY")
 NEO4J_URI = os.getenv("NEO4J_URI")
 NEO4J_USER = os.getenv("NEO4J_USER")
 NEO4J_PASSWORD = os.getenv("NEO4J_PASSWORD")
+
+POSTGRES_USER = os.getenv("POSTGRES_USER")
+POSTGRES_PASSWORD = os.getenv("POSTGRES_PASSWORD")
+POSTGRES_DB = os.getenv("POSTGRES_DB", "relic")
+POSTGRES_HOST = os.getenv("POSTGRES_HOST", "postgres")
+POSTGRES_PORT = os.getenv("POSTGRES_PORT", 5432)
diff --git a/core/ingress/src/main.py b/core/ingress/src/main.py
index 663cf19..ad45a32 100644
--- a/core/ingress/src/main.py
+++ b/core/ingress/src/main.py
@@ -155,7 +155,7 @@ def run_mock_sender():
     """Runs the mock data sender loop."""
     print("Running in mock sender mode...")
     # Use a single connection for the mock sender as well
-    mock_sender_conn = redis.connect()
+    mock_sender_conn = redis.connect(config.REDIS_HOST, config.REDIS_PORT)
     # Empty the queue before starting
     # Assuming mock_sender_conn.conn is the underlying redis-py client
     mock_sender_conn.conn.delete("hub-inbox")
diff --git a/core/pipeline/Dockerfile b/core/pipeline/Dockerfile
new file mode 100644
index 0000000..7ab4013
--- /dev/null
+++ b/core/pipeline/Dockerfile
@@ -0,0 +1,10 @@
+FROM python:3.12-slim
+
+WORKDIR /app
+
+COPY pyproject.toml uv.lock ./
+RUN pip install uv
+RUN uv sync --no-cache-dir
+COPY . .
+
+CMD ["uv", "run", "core/pipeline/main.py"]
diff --git a/core/pipeline/main.py b/core/pipeline/main.py
index 155b3cf..b6dee70 100644
--- a/core/pipeline/main.py
+++ b/core/pipeline/main.py
@@ -4,6 +4,7 @@ import os
 import sys
 import uuid
 from datetime import datetime, timezone
+from loguru import logger
 
 # Add the parent directory to the Python path to allow for absolute imports
 sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "../..")))
@@ -12,7 +13,7 @@ import traceback
 from core import config
 from core.stores import redis
 from core.stores.redis import connect as redis_connect
-from core.stores.sqlite import (
+from core.stores.postgres import (
     create_connection,
     insert_engram,
     insert_error,
@@ -22,9 +23,9 @@ from core.types.base import Datum
 
 
 def main():
-    """Main function to listen to Redis and forward to SQLite."""
+    """Main function to listen to Redis and forward to Postgres."""
     parser = argparse.ArgumentParser(
-        description="Relic Pipeline to listen to Redis and forward to SQLite."
+        description="Relic Pipeline to listen to Redis and forward to Postgres."
     )
     parser.add_argument(
         "--network",
@@ -35,20 +36,19 @@ def main():
 
     if args.network == "localhost":
         config.REDIS_HOST = "localhost"
-        print(f"Using local Redis host: {config.REDIS_HOST}")
+        logger.info(f"Using local Redis host: {config.REDIS_HOST}")
 
     redis_client = redis_connect(config.REDIS_HOST, config.REDIS_PORT)
     if not redis_client:
         return
 
-    db_path = "core/stores/data/relic.db"
-    sqlite_conn = create_connection(db_path)
-    if not sqlite_conn:
-        print("Could not connect to SQLite.")
+    postgres_conn = create_connection()
+    if not postgres_conn:
+        logger.error("Could not connect to Postgres.")
         return
 
     queue_name = "hub-inbox"
-    print(f"Listening on Redis queue: {queue_name}")
+    logger.info(f"Listening on Redis queue: {queue_name}")
 
     while True:
         message_json = None
@@ -56,27 +56,29 @@ def main():
             # Blocking pop from the Redis list
             _, d = redis_client.blpop(queue_name)
             datum_json = json.loads(d)
-            print(f"Received message: {datum_json}")
-            insert_datum(sqlite_conn, datum_json)
-            print(f"datum logged to db")
+            logger.info(f"Received message: {datum_json}")
+            insert_datum(postgres_conn, datum_json)
+            logger.info(f"datum logged to db")
 
             ##################################
             # Do some engram processing here #
-            print(f"Processing message <{datum_json['uuid'][0:8]}> into an engram...")
+            logger.info(
+                f"Processing message <{datum_json['uuid'][0:8]}> into an engram..."
+            )
             engram_data = datum_json
             engram_data["data_json"] = {"some_new_key": "some_processed_values"}
-            print("Done!")
+            logger.info("Done!")
             ##################################
 
-            # Insert into SQLite
+            # Insert into Postgres
             if engram_data:
-                insert_engram(sqlite_conn, engram_data)
-                print("Inserted engram to SQLite.")
+                insert_engram(postgres_conn, engram_data)
+                logger.info("Inserted engram to Postgres.")
             else:
-                print("No engram data to insert.")
+                logger.warning("No engram data to insert.")
 
         except Exception as e:
-            print(f"An unexpected error occurred: {e}")
+            logger.error(f"An unexpected error occurred: {e}")
             traceback.print_exc()
             if message_json:
                 now = datetime.now(timezone.utc)
@@ -87,10 +89,10 @@ def main():
                     "input_data": message_json,
                     "error_message": f"{e}\n{traceback.format_exc()}",
                 }
-                insert_error(sqlite_conn, error_data)
-                print("Error logged to SQLite.")
+                insert_error(postgres_conn, error_data)
+                logger.info("Error logged to Postgres.")
 
-    sqlite_conn.close()
+    postgres_conn.close()
 
 
 if __name__ == "__main__":
diff --git a/core/stores/data/postgres/.gitkeep b/core/stores/data/postgres/.gitkeep
new file mode 100644
index 0000000..e69de29
diff --git a/core/stores/postgres.py b/core/stores/postgres.py
new file mode 100644
index 0000000..2413403
--- /dev/null
+++ b/core/stores/postgres.py
@@ -0,0 +1,173 @@
+import os
+import psycopg2
+import json
+from dotenv import load_dotenv
+from loguru import logger
+
+from core import config
+
+
+def create_connection(host=config.POSTGRES_HOST):
+    """create a database connection to the PostgreSQL database"""
+    conn = None
+    try:
+        conn = psycopg2.connect(
+            dbname=config.POSTGRES_DB,
+            user=config.POSTGRES_USER,
+            password=config.POSTGRES_PASSWORD,
+            host=host,
+            port=config.POSTGRES_PORT,
+        )
+        return conn
+    except psycopg2.Error as e:
+        logger.error(e)
+
+    return conn
+
+
+CREATE_DATUM_TABLE = """ CREATE TABLE IF NOT EXISTS datum (
+                            uuid text PRIMARY KEY,
+                            unix_ts integer NOT NULL,
+                            iso_ts text NOT NULL,
+                            collector text NOT NULL,
+                            source_type text NOT NULL,
+                            data_json jsonb NOT NULL
+                        ); """
+
+CREATE_ENGRAM_TABLE = """ CREATE TABLE IF NOT EXISTS engram (
+                            uuid text PRIMARY KEY,
+                            unix_ts integer NOT NULL,
+                            iso_ts text NOT NULL,
+                            collector text NOT NULL,
+                            source_type text NOT NULL,
+                            data_json jsonb NOT NULL
+                        ); """
+
+
+CREATE_ERROR_TABLE = """ CREATE TABLE IF NOT EXISTS error (
+                            id text PRIMARY KEY,
+                            unix_ts integer NOT NULL,
+                            iso_ts text NOT NULL,
+                            input_data text NOT NULL,
+                            error_message text NOT NULL
+                        ); """
+
+
+def create_table(conn, sql):
+    """create a table from the create_table_sql statement
+    :param conn: Connection object
+    :return:
+    """
+    try:
+        c = conn.cursor()
+        c.execute(sql)
+        conn.commit()
+        logger.info("Table created successfully.")
+    except psycopg2.Error as e:
+        logger.error(f"Error creating table: {e}")
+        conn.rollback()
+        raise e
+
+
+def insert_datum(conn, datum_data):
+    """
+    Create a new engram into the engram table
+    :param conn:
+    :param datum_data:
+    :return: datum id
+    """
+    # Convert the JSON data to a string
+    if isinstance(datum_data["data_json"], dict):
+        datum_data["data_json"] = json.dumps(datum_data["data_json"])
+    sql = """ INSERT INTO datum(uuid,unix_ts,iso_ts,collector,source_type,data_json)
+              VALUES(%s,%s,%s,%s,%s,%s) """
+    try:
+        cur = conn.cursor()
+        values = (
+            datum_data["uuid"],
+            datum_data["unix_ts"],
+            datum_data["iso_ts"],
+            datum_data["collector"],
+            datum_data["source_type"],
+            datum_data["data_json"],
+        )
+        cur.execute(sql, values)
+        conn.commit()
+    except psycopg2.Error as e:
+        logger.error(f"Error inserting datum: {e}")
+        conn.rollback()
+        raise e
+
+
+def insert_engram(conn, engram_data):
+    """
+    Create a new engram into the engram table
+    :param conn:
+    :param engram_data:
+    :return: engram id
+    """
+    # Convert the JSON data to a string
+    if isinstance(engram_data["data_json"], dict):
+        engram_data["data_json"] = json.dumps(engram_data["data_json"])
+    sql = """ INSERT INTO engram(uuid,unix_ts,iso_ts,collector,source_type,data_json)
+              VALUES(%s,%s,%s,%s,%s,%s) """
+    try:
+        cur = conn.cursor()
+        values = (
+            engram_data["uuid"],
+            engram_data["unix_ts"],
+            engram_data["iso_ts"],
+            engram_data["collector"],
+            engram_data["source_type"],
+            engram_data["data_json"],
+        )
+        cur.execute(sql, values)
+        conn.commit()
+    except psycopg2.Error as e:
+        logger.error(f"Error inserting engram: {e}")
+        conn.rollback()
+        raise e
+
+
+def insert_error(conn, error_data):
+    """
+    Create a new error record into the error table
+    :param conn:
+    :param error_data:
+    :return: error id
+    """
+    sql = """ INSERT INTO error(id,unix_ts,iso_ts,input_data,error_message)
+              VALUES(%s,%s,%s,%s,%s) """
+    try:
+        cur = conn.cursor()
+        values = (
+            error_data["id"],
+            error_data["unix_ts"],
+            error_data["iso_ts"],
+            error_data["input_data"],
+            error_data["error_message"],
+        )
+        cur.execute(sql, values)
+        conn.commit()
+    except psycopg2.Error as e:
+        logger.error(f"Error inserting error: {e}")
+        conn.rollback()
+        raise e
+
+
+def main():
+    # create a database connection
+    conn = create_connection()
+
+    # create tables
+    if conn is not None:
+        create_table(conn, CREATE_DATUM_TABLE)
+        create_table(conn, CREATE_ENGRAM_TABLE)
+        create_table(conn, CREATE_ERROR_TABLE)
+        conn.close()
+    else:
+        logger.error("Error! cannot create the database connection.")
+
+
+if __name__ == "__main__":
+    main()
diff --git a/core/stores/redis.py b/core/stores/redis.py
index 634f990..d5ce8d6 100644
--- a/core/stores/redis.py
+++ b/core/stores/redis.py
@@ -29,12 +29,13 @@ class RedisConnection:
         self.conn.rpush(key, message)
 
 
-def connect(host="localhost", port=6379, db=0):
+def connect(host, port, db=0):
     """Connect to Redis and return a RedisConnection object."""
     try:
-        r = redis.Redis(host=host, port=port, db=db, decode_responses=True)
+        pool = redis.BlockingConnectionPool(host=host, port=port, db=db)
+        r = redis.Redis(connection_pool=pool, decode_responses=True)
         r.ping()
-        print("Successfully connected to Redis.")
+        print(f"Successfully connected to Redis at {host}:{port}")
         return RedisConnection(r)
     except redis.exceptions.ConnectionError as e:
         print(f"Could not connect to Redis: {e}")
diff --git a/devtools/init_db.py b/devtools/init_db.py
new file mode 100644
index 0000000..24c1ccc
--- /dev/null
+++ b/devtools/init_db.py
@@ -0,0 +1,26 @@
+import os
+import sys
+
+# Add the parent directory to the Python path to allow for absolute imports
+sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
+
+from core.stores import postgres
+
+
+def main():
+    """Initializes the database by creating necessary tables."""
+    print("Connecting to the database...")
+    conn = postgres.create_connection("localhost")
+    if conn:
+        print("Connection successful. Creating tables...")
+        postgres.create_table(conn, postgres.CREATE_DATUM_TABLE)
+        postgres.create_table(conn, postgres.CREATE_ENGRAM_TABLE)
+        postgres.create_table(conn, postgres.CREATE_ERROR_TABLE)
+        conn.close()
+        print("Database initialization complete.")
+    else:
+        print("Failed to connect to the database.")
+
+
+if __name__ == "__main__":
+    main()
diff --git a/devtools/mock/media/2025-09-01 22.16.37.jpg b/devtools/mock/media/2025-09-01 22.16.37.jpg
new file mode 100644
index 0000000..6b8b58c
Binary files /dev/null and b/devtools/mock/media/2025-09-01 22.16.37.jpg differ
diff --git a/devtools/mock/sample_collectors.txt b/devtools/mock/sample_collectors.txt
new file mode 100644
index 0000000..8af390f
--- /dev/null
+++ b/devtools/mock/sample_collectors.txt
@@ -0,0 +1,89 @@
+# Each line is a 'quicklog' note for test streaming to the backend.
+
+- Docker path not available:
+https://timonweb.com/docker/getting-path-and-accessing-persistent-volumes-in-docker-for-mac/
+
+- study this: https://www.janestreet.com/technology/
+
+- TODO: set up docker for post gres, migrate sqlite to pg, add volumes for the redis and pg servers
+
+- https://youtu.be/ruBm9WywevM?si=EiHhcbkMlTXwpiIf
+
+- https://blog.wilsonl.in/search-engine/
+
+- https://www.amazon.sg/Kill-Chain-Defending-America-High-Tech/dp/031653353X
+
+- https://gist.github.com/codelion/6cbbd3ec7b0ccef77d3c1fe3d6b0a57c
+
+- https://medium.com/asymptotic-spaghetti-integration/from-beta-to-battle-tested-picking-between-letta-mem0-zep-for-ai-memory-
+
+- https://s2.dev/
+
+simple cloud based streams
+
+- 🚀 MLSG  - August 2025 Meetup: Agents, Experts and Extracting Structured Data
+
+📅 Date: Aug 27, 2025 (Wednesday)
+🕗 Time: 7:00PM - 9:00PM SST
+📍 Location: Google Developer Space, Google, Singapore
+🔗 bit.ly/mlsg-aug2025
+
+Talks
+🪄 "LangExtract + New Gemma" by Sam Witteveen
+🪄 "Mixture of Experts Routing" by Florian Kowarsch
+🪄 "How to Spend your Tokens" by Martin Andrews
+
+🚀 View the full agenda & register today! → bit.ly/mlsg-aug2025
+
+- https://ai.google.dev/gemini-api/docs/url-context
+
+- https://github.com/google/langextract
+
+- https://g.co/gemini/share/
+
+- flatcase for modules
+
+PascalCase for structs and traits
+
+snake_case for variables
+
+MACRO_CASE for constants
+
+kebab-case for filesystem entities
+
+snake_colon:case for implementations
+
+- https://grahamduncan.blog/whats-going-on-here/
+
+- https://gist.github.com/cablej/ccfe7fe097d8bbb05519bacfeb910038
+
+- https://arxiv.org/pdf/2504.19413
+
+- 2025-09-01 22.16.37.jpg
+
+- https://youtu.be/Pv9Nwwx_P3Y?si=nvJC8tvwxPW3nE08
+
+- https://g.co/gemini/share/f4031d88c7d7
+
+- https://www.reddit.com/r/algotrading/comments/1h6ljbv/rust_trading_platform_from_scratch_update_2/
+
+- https://www.reddit.com/r/Supabase/comments/1clj4wz/signinwithoauth_always_redirects_to_localhost3000/
+
+- https://youtu.be/_PioN-CpOP0?si=pAAo63taTSgin06o
+
+- https://youtu.be/iwRaNYa8yTw?si=YvtVm5kM708si3PS
+
+- nlp on industry forums for potebtial early controversies
+
+- crypto szar bill
+
+- https://www.diljitpr.net/p/web-url-scraping-designing-a-high
+s
+- https://github.com/nama1arpit/reddit-streaming-pipeline/tree/main
+
+- https://youtu.be/3JW732GrMdg?si=3qCeBFGFh-qFBBHr
+
+- Meal Subscriptions: Offer a meal plan subscription that gives people affordable, protein-packed meals each week. By locking customers into a subscription, you can lower costs for them (due to bulk buying) and increase your margins.
+Protein Snack Box: If complete meals are out of the question, another approach could be offering protein-packed snack boxes for fitness enthusiasts or busy professionals who need quick protein fixes between meals.
+
+- https://www.opinionx.co/blog/customer-problem-stack-ranking
\ No newline at end of file
diff --git a/docker-compose-dokploy.yml b/docker-compose-dokploy.yml
index d80a4c0..86dd741 100644
--- a/docker-compose-dokploy.yml
+++ b/docker-compose-dokploy.yml
@@ -5,9 +5,11 @@ services:
     image: "redis:alpine"
     ports:
       - "6379:6379"
-    networks:
-      - dokploy-network
+    volumes:
+      - redis-data:/data
   ingress:
+    env_file:
+      - .env
     build:
       context: .
       dockerfile: ./core/ingress/Dockerfile
@@ -15,6 +17,7 @@ services:
       - "8000:8000"
     depends_on:
       - redis
+      - postgres
 
   collector-webapp:
     build:
@@ -26,18 +29,46 @@ services:
       - redis
       - ingress
 
-  neo4j:
-    image: neo4j
-    healthcheck:
-      test: "wget -qO- http://localhost:7474 || exit 1"
-      interval: 1s
-      timeout: 10s
-      retries: 10
-      start_period: 3s
-    ports:
-      - "7474:7474" 
-      - "${NEO4J_BOLT_PORT:-7687}:${NEO4J_BOLT_PORT:-7687}" # Bolt
-    volumes:
-      - ./core/stores/data/neo4j:/data
+  # neo4j:
+  #   image: neo4j
+  #   healthcheck:
+  #     test: "wget -qO- http://localhost:7474 || exit 1"
+  #     interval: 1s
+  #     timeout: 10s
+  #     retries: 10
+  #     start_period: 3s
+  #   ports:
+  #     - "7474:7474"
+  #     - "${NEO4J_BOLT_PORT:-7687}:${NEO4J_BOLT_PORT:-7687}" # Bolt
+  #   volumes:
+  #     - ./core/stores/data/neo4j:/data
+  #   environment:
+  #     - NEO4J_AUTH=${NEO4J_USER}/${NEO4J_PASSWORD}
+  #   networks:
+  #     - dokploy-network
+
+  pipeline:
+    env_file:
+      - .env
+    build:
+      context: .
+      dockerfile: ./core/pipeline/Dockerfile
+    depends_on:
+      - redis
+      - postgres
+
+  postgres:
+    image: postgres
+    restart: always
     environment:
-      - NEO4J_AUTH=${NEO4J_USER}/${NEO4J_PASSWORD}
+      - POSTGRES_USER=${POSTGRES_USER}
+      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
+      - POSTGRES_DB=${POSTGRES_DB}
+    volumes:
+      - postgres-data:/var/lib/posgresql/data
+    ports:
+      - "5432:5432"
+
+volumes:
+  postgres-data:
+  redis-data:
diff --git a/docker-compose.yml b/docker-compose.yml
index 2e4452d..3e77a00 100644
--- a/docker-compose.yml
+++ b/docker-compose.yml
@@ -5,8 +5,14 @@ services:
     image: "redis:alpine"
     ports:
       - "6379:6379"
+    volumes:
+      - redis-data:/data
+    networks:
+      - local-network
 
   ingress:
+    env_file:
+      - .env
     build:
       context: .
       dockerfile: ./core/ingress/Dockerfile
@@ -14,6 +20,9 @@ services:
       - "8000:8000"
     depends_on:
       - redis
+      - postgres
+    networks:
+      - local-network
 
   collector-webapp:
     build:
@@ -24,19 +33,57 @@ services:
     depends_on:
       - redis
       - ingress
+    networks:
+      - local-network
 
-  neo4j:
-    image: neo4j
-    healthcheck:
-      test: "wget -qO- http://localhost:7474 || exit 1"
-      interval: 1s
-      timeout: 10s
-      retries: 10
-      start_period: 3s
-    ports:
-      - "7474:7474" 
-      - "${NEO4J_BOLT_PORT:-7687}:${NEO4J_BOLT_PORT:-7687}" # Bolt
-    volumes:
-      - ./core/stores/data/neo4j:/data
+  # neo4j:
+  #   image: neo4j
+  #   healthcheck:
+  #     test: "wget -qO- http://localhost:7474 || exit 1"
+  #     interval: 1s
+  #     timeout: 10s
+  #     retries: 10
+  #     start_period: 3s
+  #   ports:
+  #     - "7474:7474" 
+  #     - "${NEO4J_BOLT_PORT:-7687}:${NEO4J_BOLT_PORT:-7687}" # Bolt
+  #   volumes:
+  #     - ./core/stores/data/neo4j:/data
+  #   environment:
+  #     - NEO4J_AUTH=${NEO4J_USER}/${NEO4J_PASSWORD}
+  #   networks:
+  #     - local-network
+
+  pipeline:
+    env_file:
+      - .env
+    build:
+      context: .
+      dockerfile: ./core/pipeline/Dockerfile
+    depends_on:
+      - redis
+      - postgres
+    networks:
+      - local-network
+
+  postgres:
+    image: postgres
+    restart: always
     environment:
-      - NEO4J_AUTH=${NEO4J_USER}/${NEO4J_PASSWORD}
+      - POSTGRES_USER=${POSTGRES_USER}
+      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
+      - POSTGRES_DB=${POSTGRES_DB}
+    volumes:
+      - postgres-data:/var/lib/posgresql/data
+    ports:
+      - "5432:5432"
+    networks:
+      - local-network
+
+networks:
+  local-network:
+    driver: bridge
+
+volumes:
+  postgres-data:
+  redis-data:
diff --git a/docs/relic_arch.excalidraw b/docs/relic_arch.excalidraw
index d11f9f8..4fbde07 100644
--- a/docs/relic_arch.excalidraw
+++ b/docs/relic_arch.excalidraw
@@ -6,10 +6,10 @@
     {
       "id": "CbxGbD-fdNfvjiVW5p_QT",
       "type": "rectangle",
-      "x": 1089.0005187988281,
-      "y": 1522.2849884033203,
+      "x": 1099.6160432478155,
+      "y": 1505.9193882111315,
       "width": 725.7145385742186,
-      "height": 244.28569030761724,
+      "height": 146.64199244801287,
       "angle": 0,
       "strokeColor": "#1e1e1e",
       "backgroundColor": "transparent",
@@ -25,8 +25,8 @@
         "type": 3
       },
       "seed": 2109425450,
-      "version": 853,
-      "versionNonce": 1983249718,
+      "version": 1038,
+      "versionNonce": 206798602,
       "isDeleted": false,
       "boundElements": [
         {
@@ -38,15 +38,15 @@
           "type": "arrow"
         }
       ],
-      "updated": 1755365967609,
+      "updated": 1756397925127,
       "link": null,
       "locked": false
     },
     {
       "id": "qOCvU-qX329SjCzv7rV5a",
       "type": "text",
-      "x": 1420.1778106689453,
-      "y": 1527.2849884033203,
+      "x": 1430.7933351179327,
+      "y": 1510.9193882111315,
       "width": 63.359954833984375,
       "height": 25,
       "angle": 0,
@@ -62,11 +62,11 @@
       "index": "Zx",
       "roundness": null,
       "seed": 501010922,
-      "version": 735,
-      "versionNonce": 194416426,
+      "version": 920,
+      "versionNonce": 1080233418,
       "isDeleted": false,
       "boundElements": [],
-      "updated": 1755365661396,
+      "updated": 1756397925127,
       "link": null,
       "locked": false,
       "text": "stores",
@@ -101,8 +101,8 @@
         "type": 3
       },
       "seed": 1725986730,
-      "version": 497,
-      "versionNonce": 592030954,
+      "version": 499,
+      "versionNonce": 1809694102,
       "isDeleted": false,
       "boundElements": [
         {
@@ -114,7 +114,7 @@
           "type": "arrow"
         }
       ],
-      "updated": 1755365028206,
+      "updated": 1756397720837,
       "link": null,
       "locked": false
     },
@@ -138,11 +138,11 @@
       "index": "Zz",
       "roundness": null,
       "seed": 1718552758,
-      "version": 391,
-      "versionNonce": 1482481526,
+      "version": 393,
+      "versionNonce": 1956554122,
       "isDeleted": false,
       "boundElements": [],
-      "updated": 1755364927256,
+      "updated": 1756397720837,
       "link": null,
       "locked": false,
       "text": "processors",
@@ -1291,98 +1291,6 @@
       "autoResize": true,
       "lineHeight": 1.25
     },
-    {
-      "id": "MTRNRLn9S45sztxNcB4Hl",
-      "type": "ellipse",
-      "x": 1279.8573608398438,
-      "y": 616.8571166992188,
-      "width": 154.2857666015625,
-      "height": 85,
-      "angle": 0,
-      "strokeColor": "#1e1e1e",
-      "backgroundColor": "transparent",
-      "fillStyle": "solid",
-      "strokeWidth": 2,
-      "strokeStyle": "solid",
-      "roughness": 1,
-      "opacity": 100,
-      "groupIds": [],
-      "frameId": null,
-      "index": "aU",
-      "roundness": {
-        "type": 2
-      },
-      "seed": 315474806,
-      "version": 90,
-      "versionNonce": 94905898,
-      "isDeleted": false,
-      "boundElements": [
-        {
-          "type": "text",
-          "id": "HffBWAqY6AWlRwdXEfxbT"
-        },
-        {
-          "id": "K7KKR2exh9feLxJIgUw6V",
-          "type": "arrow"
-        },
-        {
-          "id": "0F5C50HpM_7oD2FJ84BV6",
-          "type": "arrow"
-        },
-        {
-          "id": "Twpw_-c-F8zjYRQs5kN4M",
-          "type": "arrow"
-        },
-        {
-          "id": "_9rlY1o2tFdtqKxOM7P3X",
-          "type": "arrow"
-        },
-        {
-          "id": "msuYzvSYsmLbFPrMm4hac",
-          "type": "arrow"
-        }
-      ],
-      "updated": 1755364415702,
-      "link": null,
-      "locked": false
-    },
-    {
-      "id": "HffBWAqY6AWlRwdXEfxbT",
-      "type": "text",
-      "x": 1319.6420211973445,
-      "y": 634.3050784987905,
-      "width": 74.61993408203125,
-      "height": 50,
-      "angle": 0,
-      "strokeColor": "#1e1e1e",
-      "backgroundColor": "transparent",
-      "fillStyle": "solid",
-      "strokeWidth": 2,
-      "strokeStyle": "solid",
-      "roughness": 1,
-      "opacity": 100,
-      "groupIds": [],
-      "frameId": null,
-      "index": "aUV",
-      "roundness": null,
-      "seed": 1982223990,
-      "version": 61,
-      "versionNonce": 482498986,
-      "isDeleted": false,
-      "boundElements": [],
-      "updated": 1755364417899,
-      "link": null,
-      "locked": false,
-      "text": "Inbox\n(Queue)",
-      "fontSize": 20,
-      "fontFamily": 5,
-      "textAlign": "center",
-      "verticalAlign": "middle",
-      "containerId": "MTRNRLn9S45sztxNcB4Hl",
-      "originalText": "Inbox\n(Queue)",
-      "autoResize": true,
-      "lineHeight": 1.25
-    },
     {
       "id": "TmW9DMZ6vkOA2ng1UTeUT",
       "type": "rectangle",
@@ -1405,8 +1313,8 @@
         "type": 3
       },
       "seed": 1292356010,
-      "version": 747,
-      "versionNonce": 1558714282,
+      "version": 753,
+      "versionNonce": 1691607562,
       "isDeleted": false,
       "boundElements": [
         {
@@ -1414,11 +1322,11 @@
           "id": "YFSOM79Bc6ibuDtqTYm-V"
         },
         {
-          "id": "K7KKR2exh9feLxJIgUw6V",
+          "id": "LXLJqAY7oJD-QFZU5liQ-",
           "type": "arrow"
         }
       ],
-      "updated": 1755364531053,
+      "updated": 1756397779311,
       "link": null,
       "locked": false
     },
@@ -1459,76 +1367,13 @@
       "autoResize": true,
       "lineHeight": 1.25
     },
-    {
-      "id": "K7KKR2exh9feLxJIgUw6V",
-      "type": "arrow",
-      "x": 1347.757177734375,
-      "y": 706.5509439643297,
-      "width": 0.00006103515625,
-      "height": 227.87798059621718,
-      "angle": 0,
-      "strokeColor": "#1e1e1e",
-      "backgroundColor": "transparent",
-      "fillStyle": "solid",
-      "strokeWidth": 2,
-      "strokeStyle": "solid",
-      "roughness": 1,
-      "opacity": 100,
-      "groupIds": [],
-      "frameId": null,
-      "index": "aY",
-      "roundness": null,
-      "seed": 35315114,
-      "version": 160,
-      "versionNonce": 1821488426,
-      "isDeleted": false,
-      "boundElements": [],
-      "updated": 1755364531053,
-      "link": null,
-      "locked": false,
-      "points": [
-        [
-          0,
-          0
-        ],
-        [
-          -0.00006103515625,
-          227.87798059621718
-        ]
-      ],
-      "lastCommittedPoint": null,
-      "startBinding": {
-        "elementId": "MTRNRLn9S45sztxNcB4Hl",
-        "focus": 0.11981748686020798,
-        "gap": 4.989369194559835,
-        "fixedPoint": [
-          0.44009125656989606,
-          1.0552214972365992
-        ]
-      },
-      "endBinding": {
-        "elementId": "TmW9DMZ6vkOA2ng1UTeUT",
-        "focus": -0.0012367481163622568,
-        "gap": 5,
-        "fixedPoint": [
-          0.4993816259418189,
-          -0.08333333333333333
-        ]
-      },
-      "startArrowhead": null,
-      "endArrowhead": "arrow",
-      "elbowed": true,
-      "fixedSegments": null,
-      "startIsSpecial": null,
-      "endIsSpecial": null
-    },
     {
       "id": "0F5C50HpM_7oD2FJ84BV6",
       "type": "arrow",
-      "x": 1125.5275840587085,
-      "y": 524.0768342359955,
-      "width": 153.15460987972642,
-      "height": 121.04329394906256,
+      "x": 1125.5275840587087,
+      "y": 524.0348501178211,
+      "width": 144.1428905646801,
+      "height": 109.25197416934702,
       "angle": 0,
       "strokeColor": "#1e1e1e",
       "backgroundColor": "transparent",
@@ -1542,11 +1387,11 @@
       "index": "aZ",
       "roundness": null,
       "seed": 1983905642,
-      "version": 72,
-      "versionNonce": 720380086,
+      "version": 143,
+      "versionNonce": 1259345110,
       "isDeleted": false,
       "boundElements": [],
-      "updated": 1755364414524,
+      "updated": 1756397702580,
       "link": null,
       "locked": false,
       "points": [
@@ -1555,32 +1400,32 @@
           0
         ],
         [
-          153.15460987972642,
-          121.04329394906256
+          144.1428905646801,
+          109.25197416934702
         ]
       ],
       "lastCommittedPoint": null,
       "startBinding": {
-        "elementId": "ckCiZqipq5TdvPQxbUsF4",
-        "focus": -0.7806935746739567,
-        "gap": 1.71466064453125
+        "elementId": "EcO53WI8kx0MRj8LFgQUF",
+        "focus": -0.7256446656031075,
+        "gap": 21.75827409558792
       },
       "endBinding": {
-        "elementId": "MTRNRLn9S45sztxNcB4Hl",
-        "focus": -0.6008964734849949,
-        "gap": 2.020158679172297
+        "elementId": "Pl7Za8XVdR2F-8iamtbPK",
+        "focus": -0.4622559608454978,
+        "gap": 7.316653316223421
       },
       "startArrowhead": null,
-      "endArrowhead": "arrow",
+      "endArrowhead": null,
       "elbowed": false
     },
     {
       "id": "Twpw_-c-F8zjYRQs5kN4M",
       "type": "arrow",
-      "x": 1131.4000595366736,
-      "y": 590.9338612214339,
-      "width": 146.17134787473515,
-      "height": 55.172763857898985,
+      "x": 1131.4000595366733,
+      "y": 590.898372036026,
+      "width": 132.0517693231277,
+      "height": 54.87150161528996,
       "angle": 0,
       "strokeColor": "#1e1e1e",
       "backgroundColor": "transparent",
@@ -1594,11 +1439,11 @@
       "index": "aa",
       "roundness": null,
       "seed": 755556214,
-      "version": 66,
-      "versionNonce": 1423350262,
+      "version": 126,
+      "versionNonce": 222521162,
       "isDeleted": false,
       "boundElements": [],
-      "updated": 1755364414524,
+      "updated": 1756397699264,
       "link": null,
       "locked": false,
       "points": [
@@ -1607,32 +1452,32 @@
           0
         ],
         [
-          146.17134787473515,
-          55.172763857898985
+          132.0517693231277,
+          54.87150161528996
         ]
       ],
       "lastCommittedPoint": null,
       "startBinding": {
-        "elementId": "qiq1YHYwLOME-znUUozpc",
-        "focus": -0.5666714349117796,
-        "gap": 6.000091552734375
+        "elementId": "EcO53WI8kx0MRj8LFgQUF",
+        "focus": -0.46432071538860004,
+        "gap": 15.885798617623323
       },
       "endBinding": {
-        "elementId": "MTRNRLn9S45sztxNcB4Hl",
-        "focus": -0.4123332818056467,
-        "gap": 2.81916987011703
+        "elementId": "Pl7Za8XVdR2F-8iamtbPK",
+        "focus": -0.43240799012651193,
+        "gap": 12.284842835772906
       },
       "startArrowhead": null,
-      "endArrowhead": "arrow",
+      "endArrowhead": null,
       "elbowed": false
     },
     {
       "id": "_9rlY1o2tFdtqKxOM7P3X",
       "type": "arrow",
       "x": 1128.2943731372645,
-      "y": 801.6404194698179,
-      "width": 150.90211095859422,
-      "height": 160.8475609384319,
+      "y": 801.707758373441,
+      "width": 140.824535383711,
+      "height": 141.29769756639269,
       "angle": 0,
       "strokeColor": "#1e1e1e",
       "backgroundColor": "transparent",
@@ -1646,11 +1491,11 @@
       "index": "ab",
       "roundness": null,
       "seed": 584981942,
-      "version": 76,
-      "versionNonce": 102492982,
+      "version": 147,
+      "versionNonce": 503532874,
       "isDeleted": false,
       "boundElements": [],
-      "updated": 1755364414524,
+      "updated": 1756397692448,
       "link": null,
       "locked": false,
       "points": [
@@ -1659,32 +1504,32 @@
           0
         ],
         [
-          150.90211095859422,
-          -160.8475609384319
+          140.824535383711,
+          -141.29769756639269
         ]
       ],
       "lastCommittedPoint": null,
       "startBinding": {
-        "elementId": "okLfO5mmttTaL7kHOjnNV",
-        "focus": 0.7638504688914082,
-        "gap": 1.999603271484375
+        "elementId": "EcO53WI8kx0MRj8LFgQUF",
+        "focus": 0.8528343707764391,
+        "gap": 18.99148501703212
       },
       "endBinding": {
-        "elementId": "MTRNRLn9S45sztxNcB4Hl",
-        "focus": 0.7990711973491967,
-        "gap": 3.3842842424055095
+        "elementId": "Pl7Za8XVdR2F-8iamtbPK",
+        "focus": 0.7588619710678124,
+        "gap": 6.6177631745983945
       },
       "startArrowhead": null,
-      "endArrowhead": "arrow",
+      "endArrowhead": null,
       "elbowed": false
     },
     {
       "id": "msuYzvSYsmLbFPrMm4hac",
       "type": "arrow",
       "x": 882.6429633663118,
-      "y": 727.7410589956087,
-      "width": 394.9484010166303,
-      "height": 80.62800074784559,
+      "y": 727.753107969214,
+      "width": 385.15412511232523,
+      "height": 73.07613972256036,
       "angle": 0,
       "strokeColor": "#1e1e1e",
       "backgroundColor": "transparent",
@@ -1698,11 +1543,11 @@
       "index": "ac",
       "roundness": null,
       "seed": 1451637302,
-      "version": 62,
-      "versionNonce": 488969334,
+      "version": 132,
+      "versionNonce": 125152342,
       "isDeleted": false,
       "boundElements": [],
-      "updated": 1755364414524,
+      "updated": 1756397696314,
       "link": null,
       "locked": false,
       "points": [
@@ -1711,23 +1556,23 @@
           0
         ],
         [
-          394.9484010166303,
-          -80.62800074784559
+          385.15412511232523,
+          -73.07613972256036
         ]
       ],
       "lastCommittedPoint": null,
       "startBinding": {
         "elementId": "LCuuLI8g2T93gvFvKrYXD",
-        "focus": 0.39026801832739694,
-        "gap": 2.571319580078125
+        "focus": 0.36748122406977757,
+        "gap": 2.4999885127962216
       },
       "endBinding": {
-        "elementId": "MTRNRLn9S45sztxNcB4Hl",
-        "focus": 0.39413265298571043,
-        "gap": 2.5760971855121837
+        "elementId": "Pl7Za8XVdR2F-8iamtbPK",
+        "focus": 0.4222053668865443,
+        "gap": 7.939583216936853
       },
       "startArrowhead": null,
-      "endArrowhead": "arrow",
+      "endArrowhead": null,
       "elbowed": false
     },
     {
@@ -1752,16 +1597,28 @@
         "type": 3
       },
       "seed": 1702271402,
-      "version": 464,
-      "versionNonce": 789004138,
+      "version": 467,
+      "versionNonce": 365179478,
       "isDeleted": false,
       "boundElements": [
         {
           "type": "text",
           "id": "vpwn7wkdrfEicLIW3kA5g"
+        },
+        {
+          "id": "_9rlY1o2tFdtqKxOM7P3X",
+          "type": "arrow"
+        },
+        {
+          "id": "Twpw_-c-F8zjYRQs5kN4M",
+          "type": "arrow"
+        },
+        {
+          "id": "0F5C50HpM_7oD2FJ84BV6",
+          "type": "arrow"
         }
       ],
-      "updated": 1755364558202,
+      "updated": 1756397702145,
       "link": null,
       "locked": false
     },
@@ -2603,7 +2460,7 @@
       "x": 1333.0005798339844,
       "y": 1223.1420593261719,
       "width": 225.14291381835938,
-      "height": 66.28570556640625,
+      "height": 85,
       "angle": 0,
       "strokeColor": "#1e1e1e",
       "backgroundColor": "transparent",
@@ -2619,8 +2476,8 @@
         "type": 2
       },
       "seed": 1923236790,
-      "version": 347,
-      "versionNonce": 783465386,
+      "version": 353,
+      "versionNonce": 2140141578,
       "isDeleted": false,
       "boundElements": [
         {
@@ -2630,9 +2487,13 @@
         {
           "id": "4H8WdDpi64qXcOUeUDHtV",
           "type": "arrow"
+        },
+        {
+          "id": "VJ8-FHfRIU0iAlHFoppTE",
+          "type": "arrow"
         }
       ],
-      "updated": 1755365110616,
+      "updated": 1756397963047,
       "link": null,
       "locked": false
     },
@@ -2640,9 +2501,9 @@
       "id": "iwS09zRNFFbATlD5W9x-R",
       "type": "text",
       "x": 1396.0720328157277,
-      "y": 1243.8493761585046,
+      "y": 1240.5900211257435,
       "width": 98.7999267578125,
-      "height": 25,
+      "height": 50,
       "angle": 0,
       "strokeColor": "#1e1e1e",
       "backgroundColor": "transparent",
@@ -2656,30 +2517,30 @@
       "index": "b02V",
       "roundness": null,
       "seed": 2024759082,
-      "version": 351,
-      "versionNonce": 675189046,
+      "version": 357,
+      "versionNonce": 1587592266,
       "isDeleted": false,
       "boundElements": [],
-      "updated": 1755365113331,
+      "updated": 1756397964220,
       "link": null,
       "locked": false,
-      "text": "EngramDB",
+      "text": "pg\nEngramDB",
       "fontSize": 20,
       "fontFamily": 5,
       "textAlign": "center",
       "verticalAlign": "middle",
       "containerId": "gV5YwW9qDfqw0DSFdGOiv",
-      "originalText": "EngramDB",
+      "originalText": "pg\nEngramDB",
       "autoResize": true,
       "lineHeight": 1.25
     },
     {
       "id": "4H8WdDpi64qXcOUeUDHtV",
       "type": "arrow",
-      "x": 1440.5508242928042,
-      "y": 1137.006438172506,
-      "width": 1.2012311922287608,
-      "height": 81.34148147096948,
+      "x": 1440.2225631174383,
+      "y": 1137.0064381725063,
+      "width": 1.4435777216735914,
+      "height": 81.34239617988214,
       "angle": 0,
       "strokeColor": "#1e1e1e",
       "backgroundColor": "transparent",
@@ -2693,11 +2554,11 @@
       "index": "b04",
       "roundness": null,
       "seed": 1611043190,
-      "version": 215,
-      "versionNonce": 1057184042,
+      "version": 218,
+      "versionNonce": 931365194,
       "isDeleted": false,
       "boundElements": [],
-      "updated": 1755365110616,
+      "updated": 1756397897442,
       "link": null,
       "locked": false,
       "points": [
@@ -2706,8 +2567,8 @@
           0
         ],
         [
-          1.2012311922287608,
-          81.34148147096948
+          1.4435777216735914,
+          81.34239617988214
         ]
       ],
       "lastCommittedPoint": null,
@@ -2814,8 +2675,8 @@
         "type": 3
       },
       "seed": 1624266614,
-      "version": 725,
-      "versionNonce": 53662134,
+      "version": 835,
+      "versionNonce": 2083267466,
       "isDeleted": false,
       "boundElements": [
         {
@@ -2823,7 +2684,7 @@
           "id": "PdhcYgg9gdqbRiC6vF4V4"
         }
       ],
-      "updated": 1755365346390,
+      "updated": 1756397899124,
       "link": null,
       "locked": false
     },
@@ -2847,11 +2708,11 @@
       "index": "b08",
       "roundness": null,
       "seed": 922876086,
-      "version": 651,
-      "versionNonce": 1402678006,
+      "version": 761,
+      "versionNonce": 1187066390,
       "isDeleted": false,
       "boundElements": [],
-      "updated": 1755365346390,
+      "updated": 1756397899124,
       "link": null,
       "locked": false,
       "text": "enrichment",
@@ -2886,8 +2747,8 @@
         "type": 3
       },
       "seed": 1491852342,
-      "version": 923,
-      "versionNonce": 790788138,
+      "version": 1033,
+      "versionNonce": 1723015754,
       "isDeleted": false,
       "boundElements": [
         {
@@ -2895,7 +2756,7 @@
           "id": "7RpVyCjUkLU5wfiblqJMW"
         }
       ],
-      "updated": 1755365353957,
+      "updated": 1756397899124,
       "link": null,
       "locked": false
     },
@@ -2919,11 +2780,11 @@
       "index": "b0A",
       "roundness": null,
       "seed": 1389290870,
-      "version": 1098,
-      "versionNonce": 1563812586,
+      "version": 1208,
+      "versionNonce": 1799257942,
       "isDeleted": false,
       "boundElements": [],
-      "updated": 1755365353957,
+      "updated": 1756397899124,
       "link": null,
       "locked": false,
       "text": "ActionPath",
@@ -2958,8 +2819,8 @@
         "type": 3
       },
       "seed": 819078454,
-      "version": 941,
-      "versionNonce": 673922038,
+      "version": 1051,
+      "versionNonce": 1298942218,
       "isDeleted": false,
       "boundElements": [
         {
@@ -2967,7 +2828,7 @@
           "id": "WIH7Kk06SIWaGOXkCz5DB"
         }
       ],
-      "updated": 1755365374440,
+      "updated": 1756397899124,
       "link": null,
       "locked": false
     },
@@ -2991,11 +2852,11 @@
       "index": "b0C",
       "roundness": null,
       "seed": 1225002614,
-      "version": 1146,
-      "versionNonce": 176966966,
+      "version": 1256,
+      "versionNonce": 1159734422,
       "isDeleted": false,
       "boundElements": [],
-      "updated": 1755365374440,
+      "updated": 1756397899124,
       "link": null,
       "locked": false,
       "text": "ContextFusion",
@@ -3030,8 +2891,8 @@
         "type": 3
       },
       "seed": 999743722,
-      "version": 1085,
-      "versionNonce": 1605346038,
+      "version": 1195,
+      "versionNonce": 936548298,
       "isDeleted": false,
       "boundElements": [
         {
@@ -3039,7 +2900,7 @@
           "id": "HtxAlv0qKFSNoqSL10rOa"
         }
       ],
-      "updated": 1755365461270,
+      "updated": 1756397899124,
       "link": null,
       "locked": false
     },
@@ -3063,11 +2924,11 @@
       "index": "b0E",
       "roundness": null,
       "seed": 1486828458,
-      "version": 1364,
-      "versionNonce": 806296246,
+      "version": 1474,
+      "versionNonce": 1444618710,
       "isDeleted": false,
       "boundElements": [],
-      "updated": 1755365524187,
+      "updated": 1756397899124,
       "link": null,
       "locked": false,
       "text": "Consolidation",
@@ -3083,8 +2944,8 @@
     {
       "id": "5z2NVfJlbLIB7QUSWds8o",
       "type": "ellipse",
-      "x": 1465.572036743164,
-      "y": 1664.5708312988281,
+      "x": 1476.1875611921514,
+      "y": 1550.561533247035,
       "width": 225.14291381835938,
       "height": 85,
       "angle": 0,
@@ -3102,8 +2963,8 @@
         "type": 2
       },
       "seed": 1974628982,
-      "version": 854,
-      "versionNonce": 1765078966,
+      "version": 939,
+      "versionNonce": 866116438,
       "isDeleted": false,
       "boundElements": [
         {
@@ -3111,16 +2972,16 @@
           "id": "B1IkS_qwQEosvh4EsqQ7Y"
         }
       ],
-      "updated": 1755366045866,
+      "updated": 1756397988627,
       "link": null,
       "locked": false
     },
     {
       "id": "B1IkS_qwQEosvh4EsqQ7Y",
       "type": "text",
-      "x": 1529.4334906404347,
-      "y": 1682.0187930983998,
-      "width": 97.21992492675781,
+      "x": 1554.6090050186212,
+      "y": 1568.0094950466066,
+      "width": 68.09994506835938,
       "height": 50,
       "angle": 0,
       "strokeColor": "#1e1e1e",
@@ -3135,104 +2996,28 @@
       "index": "b0G",
       "roundness": null,
       "seed": 1055437750,
-      "version": 913,
-      "versionNonce": 1114149110,
+      "version": 1015,
+      "versionNonce": 13619158,
       "isDeleted": false,
       "boundElements": [],
-      "updated": 1755366045866,
+      "updated": 1756397989617,
       "link": null,
       "locked": false,
-      "text": "Knowledge\nGraph",
+      "text": "neo4j\nKGraph",
       "fontSize": 20,
       "fontFamily": 5,
       "textAlign": "center",
       "verticalAlign": "middle",
       "containerId": "5z2NVfJlbLIB7QUSWds8o",
-      "originalText": "Knowledge Graph",
-      "autoResize": true,
-      "lineHeight": 1.25
-    },
-    {
-      "id": "HqhnQGRS5A5KyFe_Z2Hs2",
-      "type": "ellipse",
-      "x": 1343.2864532470703,
-      "y": 1567.0708465576172,
-      "width": 225.14291381835938,
-      "height": 85,
-      "angle": 0,
-      "strokeColor": "#1e1e1e",
-      "backgroundColor": "transparent",
-      "fillStyle": "solid",
-      "strokeWidth": 2,
-      "strokeStyle": "solid",
-      "roughness": 1,
-      "opacity": 100,
-      "groupIds": [],
-      "frameId": null,
-      "index": "b0H",
-      "roundness": {
-        "type": 2
-      },
-      "seed": 269644598,
-      "version": 750,
-      "versionNonce": 1718551914,
-      "isDeleted": false,
-      "boundElements": [
-        {
-          "type": "text",
-          "id": "JfdtsTFVNFLbRTYEuvDtz"
-        },
-        {
-          "id": "VJ8-FHfRIU0iAlHFoppTE",
-          "type": "arrow"
-        }
-      ],
-      "updated": 1755366043683,
-      "link": null,
-      "locked": false
-    },
-    {
-      "id": "JfdtsTFVNFLbRTYEuvDtz",
-      "type": "text",
-      "x": 1388.9279135530323,
-      "y": 1584.5188083571888,
-      "width": 133.659912109375,
-      "height": 50,
-      "angle": 0,
-      "strokeColor": "#1e1e1e",
-      "backgroundColor": "transparent",
-      "fillStyle": "solid",
-      "strokeWidth": 2,
-      "strokeStyle": "solid",
-      "roughness": 1,
-      "opacity": 100,
-      "groupIds": [],
-      "frameId": null,
-      "index": "b0I",
-      "roundness": null,
-      "seed": 923442294,
-      "version": 844,
-      "versionNonce": 771672106,
-      "isDeleted": false,
-      "boundElements": [],
-      "updated": 1755366043683,
-      "link": null,
-      "locked": false,
-      "text": "Engram\nMetadata DB",
-      "fontSize": 20,
-      "fontFamily": 5,
-      "textAlign": "center",
-      "verticalAlign": "middle",
-      "containerId": "HqhnQGRS5A5KyFe_Z2Hs2",
-      "originalText": "Engram Metadata DB",
+      "originalText": "neo4j\nKGraph",
       "autoResize": true,
       "lineHeight": 1.25
     },
     {
       "id": "QGDSHyuQpPBc2-Z9Oij3r",
       "type": "ellipse",
-      "x": 1207.286636352539,
-      "y": 1665.0703125,
+      "x": 1217.9021608015264,
+      "y": 1551.0610144482068,
       "width": 225.14291381835938,
       "height": 85,
       "angle": 0,
@@ -3250,24 +3035,28 @@
         "type": 2
       },
       "seed": 899494006,
-      "version": 851,
-      "versionNonce": 1038200554,
+      "version": 935,
+      "versionNonce": 1071557130,
       "isDeleted": false,
       "boundElements": [
         {
           "type": "text",
           "id": "KoC8JuhtmcGVtu3JF0tPy"
+        },
+        {
+          "id": "uCIbE5oPBygNor_VB-KJK",
+          "type": "arrow"
         }
       ],
-      "updated": 1755366040383,
+      "updated": 1756397925127,
       "link": null,
       "locked": false
     },
     {
       "id": "KoC8JuhtmcGVtu3JF0tPy",
       "type": "text",
-      "x": 1245.9281042878956,
-      "y": 1695.0182742995717,
+      "x": 1256.543628736883,
+      "y": 1581.0089762477785,
       "width": 147.65989685058594,
       "height": 25,
       "angle": 0,
@@ -3283,11 +3072,11 @@
       "index": "b0K",
       "roundness": null,
       "seed": 1858843062,
-      "version": 963,
-      "versionNonce": 610288042,
+      "version": 1046,
+      "versionNonce": 1330698442,
       "isDeleted": false,
       "boundElements": [],
-      "updated": 1755366040383,
+      "updated": 1756397925127,
       "link": null,
       "locked": false,
       "text": "Vector Storage",
@@ -3303,8 +3092,8 @@
     {
       "id": "EXHuXwtItAD2-p73kPZLy",
       "type": "ellipse",
-      "x": 1809.7632293701172,
-      "y": 1615.2530568440757,
+      "x": 1827.3182942950473,
+      "y": 1543.0065230518967,
       "width": 157.85690307617188,
       "height": 85,
       "angle": 0,
@@ -3322,8 +3111,8 @@
         "type": 2
       },
       "seed": 1957186730,
-      "version": 247,
-      "versionNonce": 413611190,
+      "version": 422,
+      "versionNonce": 544927254,
       "isDeleted": false,
       "boundElements": [
         {
@@ -3331,15 +3120,15 @@
           "id": "2sfOldur0WQP8lUdPrqOr"
         }
       ],
-      "updated": 1755365684862,
+      "updated": 1756397947477,
       "link": null,
       "locked": false
     },
     {
       "id": "2sfOldur0WQP8lUdPrqOr",
       "type": "text",
-      "x": 1845.5808803216783,
-      "y": 1645.2010186436473,
+      "x": 1863.1359452466083,
+      "y": 1572.9544848514684,
       "width": 86.59991455078125,
       "height": 25,
       "angle": 0,
@@ -3355,11 +3144,11 @@
       "index": "b0O",
       "roundness": null,
       "seed": 283024054,
-      "version": 249,
-      "versionNonce": 659506538,
+      "version": 424,
+      "versionNonce": 1583397718,
       "isDeleted": false,
       "boundElements": [],
-      "updated": 1755365695109,
+      "updated": 1756397947477,
       "link": null,
       "locked": false,
       "text": "shard.zip",
@@ -3394,18 +3183,14 @@
         "type": 3
       },
       "seed": 1528053866,
-      "version": 1004,
-      "versionNonce": 1508670710,
+      "version": 1008,
+      "versionNonce": 2096653078,
       "isDeleted": false,
       "boundElements": [
         {
           "type": "text",
           "id": "h-widWbQX4WE3SzXzD3nA"
         },
-        {
-          "id": "VJ8-FHfRIU0iAlHFoppTE",
-          "type": "arrow"
-        },
         {
           "id": "i4yvdVTqNcZU9Qjo1EK14",
           "type": "arrow"
@@ -3417,9 +3202,13 @@
         {
           "id": "yaHEa4tPY5faB9P50Be_W",
           "type": "arrow"
+        },
+        {
+          "id": "VJ8-FHfRIU0iAlHFoppTE",
+          "type": "arrow"
         }
       ],
-      "updated": 1755366009956,
+      "updated": 1756397897441,
       "link": null,
       "locked": false
     },
@@ -3463,10 +3252,10 @@
     {
       "id": "yaHEa4tPY5faB9P50Be_W",
       "type": "arrow",
-      "x": 524.0475921630859,
-      "y": 1232.3957722981772,
-      "width": 404.2857360839844,
-      "height": 319.285888671875,
+      "x": 527.8426194384589,
+      "y": 1233.0443813791344,
+      "width": 392.9672543941623,
+      "height": 324.0956133298114,
       "angle": 0,
       "strokeColor": "#9c36b5",
       "backgroundColor": "transparent",
@@ -3482,11 +3271,11 @@
         "type": 2
       },
       "seed": 1746765174,
-      "version": 239,
-      "versionNonce": 995861226,
+      "version": 241,
+      "versionNonce": 999935370,
       "isDeleted": false,
       "boundElements": [],
-      "updated": 1755366010298,
+      "updated": 1756397897442,
       "link": null,
       "locked": false,
       "points": [
@@ -3495,12 +3284,12 @@
           0
         ],
         [
-          -196.42860412597656,
-          -33.57166290283203
+          -200.2236314013495,
+          -34.22027198378919
         ],
         [
-          -404.2857360839844,
-          -319.285888671875
+          -392.9672543941623,
+          -324.0956133298114
         ]
       ],
       "lastCommittedPoint": null,
@@ -3558,10 +3347,10 @@
     {
       "id": "i4yvdVTqNcZU9Qjo1EK14",
       "type": "arrow",
-      "x": 154.76212310791016,
-      "y": 916.6814320882163,
-      "width": 402.14290618896484,
-      "height": 198.5714340209961,
+      "x": 172.0488602335208,
+      "y": 882.5840411322243,
+      "width": 386.82568676288554,
+      "height": 234.33035120697002,
       "angle": 0,
       "strokeColor": "#1971c2",
       "backgroundColor": "transparent",
@@ -3577,11 +3366,11 @@
         "type": 2
       },
       "seed": 1995149418,
-      "version": 339,
-      "versionNonce": 1312730794,
+      "version": 341,
+      "versionNonce": 47761418,
       "isDeleted": false,
       "boundElements": [],
-      "updated": 1755365901632,
+      "updated": 1756397897442,
       "link": null,
       "locked": false,
       "points": [
@@ -3590,12 +3379,12 @@
           0
         ],
         [
-          228.5715103149414,
-          52.142982482910156
+          211.28477318933076,
+          86.24037343890211
         ],
         [
-          402.14290618896484,
-          198.5714340209961
+          386.82568676288554,
+          234.33035120697002
         ]
       ],
       "lastCommittedPoint": null,
@@ -3653,10 +3442,10 @@
     {
       "id": "VJ8-FHfRIU0iAlHFoppTE",
       "type": "arrow",
-      "x": 1339.6831904768676,
-      "y": 1613.158125212778,
-      "width": 493.2375588635425,
-      "height": 312.0207251876491,
+      "x": 1322.9584434480994,
+      "y": 1253.4028455877701,
+      "width": 432.3237811182364,
+      "height": 84.28688066191785,
       "angle": 0,
       "strokeColor": "#1971c2",
       "backgroundColor": "transparent",
@@ -3672,11 +3461,11 @@
         "type": 2
       },
       "seed": 80505334,
-      "version": 450,
-      "versionNonce": 977178346,
+      "version": 685,
+      "versionNonce": 1964463690,
       "isDeleted": false,
       "boundElements": [],
-      "updated": 1755366058897,
+      "updated": 1756397907162,
       "link": null,
       "locked": false,
       "points": [
@@ -3685,24 +3474,24 @@
           0
         ],
         [
-          -229.20668901202384,
-          -93.6194085786633
+          -213.18127551959105,
+          27.770724930823235
         ],
         [
-          -493.2375588635425,
-          -312.0207251876491
+          -432.3237811182364,
+          84.28688066191785
         ]
       ],
       "lastCommittedPoint": null,
       "startBinding": {
-        "elementId": "HqhnQGRS5A5KyFe_Z2Hs2",
-        "focus": 0.25312075076212004,
-        "gap": 3.92624199492829
+        "elementId": "gV5YwW9qDfqw0DSFdGOiv",
+        "focus": 0.394389546329438,
+        "gap": 10.250308255959736
       },
       "endBinding": {
         "elementId": "J-uL0TKYs_AIrFOe8fade",
-        "focus": -0.4742801628992489,
-        "gap": 27.60232676069836
+        "focus": 0.0866098820437567,
+        "gap": 16.58670395583954
       },
       "startArrowhead": null,
       "endArrowhead": "arrow",
@@ -3711,8 +3500,8 @@
     {
       "id": "3Ybjz1Y5KFLreRJdV1oeJ",
       "type": "text",
-      "x": 753.6041259765625,
-      "y": 1704.8958485921225,
+      "x": 954.2889420659487,
+      "y": 1213.7604809545148,
       "width": 299.45977783203125,
       "height": 50,
       "angle": 0,
@@ -3728,11 +3517,11 @@
       "index": "b0b",
       "roundness": null,
       "seed": 1687957622,
-      "version": 479,
-      "versionNonce": 1362039530,
+      "version": 664,
+      "versionNonce": 264564106,
       "isDeleted": false,
       "boundElements": [],
-      "updated": 1755365906738,
+      "updated": 1756397944040,
       "link": null,
       "locked": false,
       "text": "stimuli per new engram \n(if relevant and service active)",
@@ -3824,10 +3613,10 @@
     {
       "id": "uCIbE5oPBygNor_VB-KJK",
       "type": "arrow",
-      "x": 900.4765014648438,
-      "y": 1546.6813176472983,
-      "width": 174.28558349609375,
-      "height": 0,
+      "x": 883.4877104628782,
+      "y": 1503.8956847119948,
+      "width": 350.2715682860161,
+      "height": 57.860378029548656,
       "angle": 0,
       "strokeColor": "#2f9e44",
       "backgroundColor": "transparent",
@@ -3843,11 +3632,11 @@
         "type": 2
       },
       "seed": 1975451574,
-      "version": 60,
-      "versionNonce": 206803190,
+      "version": 208,
+      "versionNonce": 1980706698,
       "isDeleted": false,
       "boundElements": [],
-      "updated": 1755365990421,
+      "updated": 1756397925128,
       "link": null,
       "locked": false,
       "points": [
@@ -3856,20 +3645,20 @@
           0
         ],
         [
-          174.28558349609375,
-          0
+          350.2715682860161,
+          57.860378029548656
         ]
       ],
       "lastCommittedPoint": null,
       "startBinding": {
         "elementId": "J-uL0TKYs_AIrFOe8fade",
-        "focus": 0.7848474151636288,
-        "gap": 26.428543090820312
+        "focus": 0.42635732570116625,
+        "gap": 15.86634572332673
       },
       "endBinding": {
-        "elementId": "CbxGbD-fdNfvjiVW5p_QT",
-        "focus": 0.8002639514966526,
-        "gap": 14.63773841088072
+        "elementId": "QGDSHyuQpPBc2-Z9Oij3r",
+        "focus": 0.2591622994361,
+        "gap": 9.572980065465211
       },
       "startArrowhead": "arrow",
       "endArrowhead": "arrow",
@@ -3878,8 +3667,8 @@
     {
       "id": "4kE-1vq7450jipDog3zdl",
       "type": "text",
-      "x": 944.8522720336914,
-      "y": 1508.8240331014,
+      "x": 971.5943082863769,
+      "y": 1487.9277079473122,
       "width": 79.81993103027344,
       "height": 25,
       "angle": 0,
@@ -3895,11 +3684,11 @@
       "index": "b0f",
       "roundness": null,
       "seed": 1961938730,
-      "version": 545,
-      "versionNonce": 2021204278,
+      "version": 584,
+      "versionNonce": 1237748374,
       "isDeleted": false,
       "boundElements": [],
-      "updated": 1755365991868,
+      "updated": 1756397927807,
       "link": null,
       "locked": false,
       "text": "retrieval",
@@ -4210,6 +3999,323 @@
       "originalText": "LLM",
       "autoResize": true,
       "lineHeight": 1.25
+    },
+    {
+      "id": "xnSvD3Lt8bGbFRudxrw_t",
+      "type": "text",
+      "x": 1249.4045781774319,
+      "y": 577.7327932002554,
+      "width": 55.43994140625,
+      "height": 25,
+      "angle": 0,
+      "strokeColor": "#1971c2",
+      "backgroundColor": "transparent",
+      "fillStyle": "solid",
+      "strokeWidth": 2,
+      "strokeStyle": "solid",
+      "roughness": 1,
+      "opacity": 100,
+      "groupIds": [],
+      "frameId": null,
+      "index": "b16",
+      "roundness": null,
+      "seed": 1719664906,
+      "version": 116,
+      "versionNonce": 1856078102,
+      "isDeleted": false,
+      "boundElements": null,
+      "updated": 1756397704530,
+      "link": null,
+      "locked": false,
+      "text": "/send",
+      "fontSize": 20,
+      "fontFamily": 5,
+      "textAlign": "left",
+      "verticalAlign": "top",
+      "containerId": null,
+      "originalText": "/send",
+      "autoResize": true,
+      "lineHeight": 1.25
+    },
+    {
+      "id": "Pl7Za8XVdR2F-8iamtbPK",
+      "type": "rectangle",
+      "x": 1275.736671695574,
+      "y": 626.9726623557877,
+      "width": 161.71441650390625,
+      "height": 60,
+      "angle": 0,
+      "strokeColor": "#1e1e1e",
+      "backgroundColor": "transparent",
+      "fillStyle": "solid",
+      "strokeWidth": 2,
+      "strokeStyle": "solid",
+      "roughness": 1,
+      "opacity": 100,
+      "groupIds": [],
+      "frameId": null,
+      "index": "b17",
+      "roundness": {
+        "type": 3
+      },
+      "seed": 669823498,
+      "version": 917,
+      "versionNonce": 367592982,
+      "isDeleted": false,
+      "boundElements": [
+        {
+          "type": "text",
+          "id": "4XCOR6qMssmwLHkpU5upH"
+        },
+        {
+          "id": "_9rlY1o2tFdtqKxOM7P3X",
+          "type": "arrow"
+        },
+        {
+          "id": "msuYzvSYsmLbFPrMm4hac",
+          "type": "arrow"
+        },
+        {
+          "id": "Twpw_-c-F8zjYRQs5kN4M",
+          "type": "arrow"
+        },
+        {
+          "id": "0F5C50HpM_7oD2FJ84BV6",
+          "type": "arrow"
+        },
+        {
+          "id": "ieKa2flDW-BuVQXkNmeP-",
+          "type": "arrow"
+        }
+      ],
+      "updated": 1756397768445,
+      "link": null,
+      "locked": false
+    },
+    {
+      "id": "4XCOR6qMssmwLHkpU5upH",
+      "type": "text",
+      "x": 1320.1839144323903,
+      "y": 644.4726623557877,
+      "width": 72.81993103027344,
+      "height": 25,
+      "angle": 0,
+      "strokeColor": "#1e1e1e",
+      "backgroundColor": "transparent",
+      "fillStyle": "solid",
+      "strokeWidth": 2,
+      "strokeStyle": "solid",
+      "roughness": 1,
+      "opacity": 100,
+      "groupIds": [],
+      "frameId": null,
+      "index": "b18",
+      "roundness": null,
+      "seed": 408805578,
+      "version": 993,
+      "versionNonce": 649378570,
+      "isDeleted": false,
+      "boundElements": [],
+      "updated": 1756397669647,
+      "link": null,
+      "locked": false,
+      "text": "Ingress",
+      "fontSize": 20,
+      "fontFamily": 5,
+      "textAlign": "center",
+      "verticalAlign": "middle",
+      "containerId": "Pl7Za8XVdR2F-8iamtbPK",
+      "originalText": "Ingress",
+      "autoResize": true,
+      "lineHeight": 1.25
+    },
+    {
+      "id": "rZpX7aC8mV3krTCexk8m7",
+      "type": "ellipse",
+      "x": 1273.1330859808793,
+      "y": 762.4743520412468,
+      "width": 154.2857666015625,
+      "height": 85,
+      "angle": 0,
+      "strokeColor": "#1e1e1e",
+      "backgroundColor": "transparent",
+      "fillStyle": "solid",
+      "strokeWidth": 2,
+      "strokeStyle": "solid",
+      "roughness": 1,
+      "opacity": 100,
+      "groupIds": [],
+      "frameId": null,
+      "index": "b19",
+      "roundness": {
+        "type": 2
+      },
+      "seed": 1266025354,
+      "version": 415,
+      "versionNonce": 997588106,
+      "isDeleted": false,
+      "boundElements": [
+        {
+          "type": "text",
+          "id": "Pnd90teYJHgYR60H1i1Fd"
+        },
+        {
+          "id": "ieKa2flDW-BuVQXkNmeP-",
+          "type": "arrow"
+        },
+        {
+          "id": "LXLJqAY7oJD-QFZU5liQ-",
+          "type": "arrow"
+        }
+      ],
+      "updated": 1756397779310,
+      "link": null,
+      "locked": false
+    },
+    {
+      "id": "Pnd90teYJHgYR60H1i1Fd",
+      "type": "text",
+      "x": 1320.8477390141613,
+      "y": 779.9223138408186,
+      "width": 58.75994873046875,
+      "height": 50,
+      "angle": 0,
+      "strokeColor": "#1e1e1e",
+      "backgroundColor": "transparent",
+      "fillStyle": "solid",
+      "strokeWidth": 2,
+      "strokeStyle": "solid",
+      "roughness": 1,
+      "opacity": 100,
+      "groupIds": [],
+      "frameId": null,
+      "index": "b1A",
+      "roundness": null,
+      "seed": 1908474442,
+      "version": 456,
+      "versionNonce": 291782282,
+      "isDeleted": false,
+      "boundElements": [],
+      "updated": 1756397969910,
+      "link": null,
+      "locked": false,
+      "text": "rq\nQueue",
+      "fontSize": 20,
+      "fontFamily": 5,
+      "textAlign": "center",
+      "verticalAlign": "middle",
+      "containerId": "rZpX7aC8mV3krTCexk8m7",
+      "originalText": "rq\nQueue",
+      "autoResize": true,
+      "lineHeight": 1.25
+    },
+    {
+      "id": "ieKa2flDW-BuVQXkNmeP-",
+      "type": "arrow",
+      "x": 1354.573583064781,
+      "y": 703.3259236744233,
+      "width": 0.005977209712227705,
+      "height": 47.040640435546266,
+      "angle": 0,
+      "strokeColor": "#1e1e1e",
+      "backgroundColor": "transparent",
+      "fillStyle": "solid",
+      "strokeWidth": 2,
+      "strokeStyle": "solid",
+      "roughness": 1,
+      "opacity": 100,
+      "groupIds": [],
+      "frameId": null,
+      "index": "b1B",
+      "roundness": {
+        "type": 2
+      },
+      "seed": 113860502,
+      "version": 37,
+      "versionNonce": 622448330,
+      "isDeleted": false,
+      "boundElements": null,
+      "updated": 1756397775710,
+      "link": null,
+      "locked": false,
+      "points": [
+        [
+          0,
+          0
+        ],
+        [
+          0.005977209712227705,
+          47.040640435546266
+        ]
+      ],
+      "lastCommittedPoint": null,
+      "startBinding": {
+        "elementId": "Pl7Za8XVdR2F-8iamtbPK",
+        "focus": 0.02505764515280485,
+        "gap": 14
+      },
+      "endBinding": {
+        "elementId": "rZpX7aC8mV3krTCexk8m7",
+        "focus": 0.05587330685825405,
+        "gap": 12.168672647032746
+      },
+      "startArrowhead": null,
+      "endArrowhead": "arrow",
+      "elbowed": false
+    },
+    {
+      "id": "LXLJqAY7oJD-QFZU5liQ-",
+      "type": "arrow",
+      "x": 1356.65365204465,
+      "y": 856.9521676991262,
+      "width": 0,
+      "height": 67.0822246007798,
+      "angle": 0,
+      "strokeColor": "#1e1e1e",
+      "backgroundColor": "transparent",
+      "fillStyle": "solid",
+      "strokeWidth": 2,
+      "strokeStyle": "solid",
+      "roughness": 1,
+      "opacity": 100,
+      "groupIds": [],
+      "frameId": null,
+      "index": "b1C",
+      "roundness": {
+        "type": 2
+      },
+      "seed": 1397319050,
+      "version": 39,
+      "versionNonce": 827972426,
+      "isDeleted": false,
+      "boundElements": null,
+      "updated": 1756397779311,
+      "link": null,
+      "locked": false,
+      "points": [
+        [
+          0,
+          0
+        ],
+        [
+          0,
+          67.0822246007798
+        ]
+      ],
+      "lastCommittedPoint": null,
+      "startBinding": {
+        "elementId": "rZpX7aC8mV3krTCexk8m7",
+        "focus": -0.08267363741283629,
+        "gap": 9.613921216346602
+      },
+      "endBinding": {
+        "elementId": "TmW9DMZ6vkOA2ng1UTeUT",
+        "focus": 0.1087909851898549,
+        "gap": 15.394532260640858
+      },
+      "startArrowhead": null,
+      "endArrowhead": "arrow",
+      "elbowed": false
     }
   ],
   "appState": {
diff --git a/pyproject.toml b/pyproject.toml
index a1ee6b2..b4d3bbd 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -9,6 +9,7 @@ dependencies = [
     "graphiti-core[google-genai]>=0.18.9",
     "httpx>=0.28.1",
     "loguru>=0.7.3",
+    "psycopg2-binary>=2.9.10",
     "pydantic>=2.11.7",
     "python-dotenv>=1.1.1",
     "redis>=6.4.0",
diff --git a/uv.lock b/uv.lock
index 86cb669..a9e60db 100644
--- a/uv.lock
+++ b/uv.lock
@@ -422,6 +422,37 @@ wheels = [
     { url = "https://files.pythonhosted.org/packages/85/0b/e40894178f02037985655fa63c55aed6c509af4bd56030f6d9cfea5aee05/posthog-6.6.1-py3-none-any.whl", hash = "sha256:cba48af9af1df2a611d08fd10a2014dbee99433118973b8c51881d9ef1aa6667", size = 119976, upload-time = "2025-08-21T14:14:57.107Z" },
 ]
 
+[[package]]
+name = "psycopg2-binary"
+version = "2.9.10"
+source = { registry = "https://pypi.org/simple" }
+sdist = { url = "https://files.pythonhosted.org/packages/cb/0e/bdc8274dc0585090b4e3432267d7be4dfbfd8971c0fa59167c711105a6bf/psycopg2-binary-2.9.10.tar.gz", hash = "sha256:4b3df0e6990aa98acda57d983942eff13d824135fe2250e6522edaa782a06de2", size = 385764, upload-time = "2024-10-16T11:24:58.126Z" }
+wheels = [
+    { url = "https://files.pythonhosted.org/packages/49/7d/465cc9795cf76f6d329efdafca74693714556ea3891813701ac1fee87545/psycopg2_binary-2.9.10-cp312-cp312-macosx_12_0_x86_64.whl", hash = "sha256:880845dfe1f85d9d5f7c412efea7a08946a46894537e4e5d091732eb1d34d9a0", size = 3044771, upload-time = "2024-10-16T11:20:35.234Z" },
+    { url = "https://files.pythonhosted.org/packages/8b/31/6d225b7b641a1a2148e3ed65e1aa74fc86ba3fee850545e27be9e1de893d/psycopg2_binary-2.9.10-cp312-cp312-macosx_14_0_arm64.whl", hash = "sha256:9440fa522a79356aaa482aa4ba500b65f28e5d0e63b801abf6aa152a29bd842a", size = 3275336, upload-time = "2024-10-16T11:20:38.742Z" },
+    { url = "https://files.pythonhosted.org/packages/30/b7/a68c2b4bff1cbb1728e3ec864b2d92327c77ad52edcd27922535a8366f68/psycopg2_binary-2.9.10-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:e3923c1d9870c49a2d44f795df0c889a22380d36ef92440ff618ec315757e539", size = 2851637, upload-time = "2024-10-16T11:20:42.145Z" },
+    { url = "https://files.pythonhosted.org/packages/0b/b1/cfedc0e0e6f9ad61f8657fd173b2f831ce261c02a08c0b09c652b127d813/psycopg2_binary-2.9.10-cp312-cp312-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:7b2c956c028ea5de47ff3a8d6b3cc3330ab45cf0b7c3da35a2d6ff8420896526", size = 3082097, upload-time = "2024-10-16T11:20:46.185Z" },
+    { url = "https://files.pythonhosted.org/packages/18/ed/0a8e4153c9b769f59c02fb5e7914f20f0b2483a19dae7bf2db54b743d0d0/psycopg2_binary-2.9.10-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:f758ed67cab30b9a8d2833609513ce4d3bd027641673d4ebc9c067e4d208eec1", size = 3264776, upload-time = "2024-10-16T11:20:50.879Z" },
+    { url = "https://files.pythonhosted.org/packages/10/db/d09da68c6a0cdab41566b74e0a6068a425f077169bed0946559b7348ebe9/psycopg2_binary-2.9.10-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:8cd9b4f2cfab88ed4a9106192de509464b75a906462fb846b936eabe45c2063e", size = 3020968, upload-time = "2024-10-16T11:20:56.819Z" },
+    { url = "https://files.pythonhosted.org/packages/94/28/4d6f8c255f0dfffb410db2b3f9ac5218d959a66c715c34cac31081e19b95/psycopg2_binary-2.9.10-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:6dc08420625b5a20b53551c50deae6e231e6371194fa0651dbe0fb206452ae1f", size = 2872334, upload-time = "2024-10-16T11:21:02.411Z" },
+    { url = "https://files.pythonhosted.org/packages/05/f7/20d7bf796593c4fea95e12119d6cc384ff1f6141a24fbb7df5a668d29d29/psycopg2_binary-2.9.10-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:d7cd730dfa7c36dbe8724426bf5612798734bff2d3c3857f36f2733f5bfc7c00", size = 2822722, upload-time = "2024-10-16T11:21:09.01Z" },
+    { url = "https://files.pythonhosted.org/packages/4d/e4/0c407ae919ef626dbdb32835a03b6737013c3cc7240169843965cada2bdf/psycopg2_binary-2.9.10-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:155e69561d54d02b3c3209545fb08938e27889ff5a10c19de8d23eb5a41be8a5", size = 2920132, upload-time = "2024-10-16T11:21:16.339Z" },
+    { url = "https://files.pythonhosted.org/packages/2d/70/aa69c9f69cf09a01da224909ff6ce8b68faeef476f00f7ec377e8f03be70/psycopg2_binary-2.9.10-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:c3cc28a6fd5a4a26224007712e79b81dbaee2ffb90ff406256158ec4d7b52b47", size = 2959312, upload-time = "2024-10-16T11:21:25.584Z" },
+    { url = "https://files.pythonhosted.org/packages/d3/bd/213e59854fafe87ba47814bf413ace0dcee33a89c8c8c814faca6bc7cf3c/psycopg2_binary-2.9.10-cp312-cp312-win32.whl", hash = "sha256:ec8a77f521a17506a24a5f626cb2aee7850f9b69a0afe704586f63a464f3cd64", size = 1025191, upload-time = "2024-10-16T11:21:29.912Z" },
+    { url = "https://files.pythonhosted.org/packages/92/29/06261ea000e2dc1e22907dbbc483a1093665509ea586b29b8986a0e56733/psycopg2_binary-2.9.10-cp312-cp312-win_amd64.whl", hash = "sha256:18c5ee682b9c6dd3696dad6e54cc7ff3a1a9020df6a5c0f861ef8bfd338c3ca0", size = 1164031, upload-time = "2024-10-16T11:21:34.211Z" },
+    { url = "https://files.pythonhosted.org/packages/3e/30/d41d3ba765609c0763505d565c4d12d8f3c79793f0d0f044ff5a28bf395b/psycopg2_binary-2.9.10-cp313-cp313-macosx_12_0_x86_64.whl", hash = "sha256:26540d4a9a4e2b096f1ff9cce51253d0504dca5a85872c7f7be23be5a53eb18d", size = 3044699, upload-time = "2024-10-16T11:21:42.841Z" },
+    { url = "https://files.pythonhosted.org/packages/35/44/257ddadec7ef04536ba71af6bc6a75ec05c5343004a7ec93006bee66c0bc/psycopg2_binary-2.9.10-cp313-cp313-macosx_14_0_arm64.whl", hash = "sha256:e217ce4d37667df0bc1c397fdcd8de5e81018ef305aed9415c3b093faaeb10fb", size = 3275245, upload-time = "2024-10-16T11:21:51.989Z" },
+    { url = "https://files.pythonhosted.org/packages/1b/11/48ea1cd11de67f9efd7262085588790a95d9dfcd9b8a687d46caf7305c1a/psycopg2_binary-2.9.10-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:245159e7ab20a71d989da00f280ca57da7641fa2cdcf71749c193cea540a74f7", size = 2851631, upload-time = "2024-10-16T11:21:57.584Z" },
+    { url = "https://files.pythonhosted.org/packages/62/e0/62ce5ee650e6c86719d621a761fe4bc846ab9eff8c1f12b1ed5741bf1c9b/psycopg2_binary-2.9.10-cp313-cp313-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:3c4ded1a24b20021ebe677b7b08ad10bf09aac197d6943bfe6fec70ac4e4690d", size = 3082140, upload-time = "2024-10-16T11:22:02.005Z" },
+    { url = "https://files.pythonhosted.org/packages/27/ce/63f946c098611f7be234c0dd7cb1ad68b0b5744d34f68062bb3c5aa510c8/psycopg2_binary-2.9.10-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:3abb691ff9e57d4a93355f60d4f4c1dd2d68326c968e7db17ea96df3c023ef73", size = 3264762, upload-time = "2024-10-16T11:22:06.412Z" },
+    { url = "https://files.pythonhosted.org/packages/43/25/c603cd81402e69edf7daa59b1602bd41eb9859e2824b8c0855d748366ac9/psycopg2_binary-2.9.10-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:8608c078134f0b3cbd9f89b34bd60a943b23fd33cc5f065e8d5f840061bd0673", size = 3020967, upload-time = "2024-10-16T11:22:11.583Z" },
+    { url = "https://files.pythonhosted.org/packages/5f/d6/8708d8c6fca531057fa170cdde8df870e8b6a9b136e82b361c65e42b841e/psycopg2_binary-2.9.10-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:230eeae2d71594103cd5b93fd29d1ace6420d0b86f4778739cb1a5a32f607d1f", size = 2872326, upload-time = "2024-10-16T11:22:16.406Z" },
+    { url = "https://files.pythonhosted.org/packages/ce/ac/5b1ea50fc08a9df82de7e1771537557f07c2632231bbab652c7e22597908/psycopg2_binary-2.9.10-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:bb89f0a835bcfc1d42ccd5f41f04870c1b936d8507c6df12b7737febc40f0909", size = 2822712, upload-time = "2024-10-16T11:22:21.366Z" },
+    { url = "https://files.pythonhosted.org/packages/c4/fc/504d4503b2abc4570fac3ca56eb8fed5e437bf9c9ef13f36b6621db8ef00/psycopg2_binary-2.9.10-cp313-cp313-musllinux_1_2_ppc64le.whl", hash = "sha256:f0c2d907a1e102526dd2986df638343388b94c33860ff3bbe1384130828714b1", size = 2920155, upload-time = "2024-10-16T11:22:25.684Z" },
+    { url = "https://files.pythonhosted.org/packages/b2/d1/323581e9273ad2c0dbd1902f3fb50c441da86e894b6e25a73c3fda32c57e/psycopg2_binary-2.9.10-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:f8157bed2f51db683f31306aa497311b560f2265998122abe1dce6428bd86567", size = 2959356, upload-time = "2024-10-16T11:22:30.562Z" },
+    { url = "https://files.pythonhosted.org/packages/08/50/d13ea0a054189ae1bc21af1d85b6f8bb9bbc5572991055d70ad9006fe2d6/psycopg2_binary-2.9.10-cp313-cp313-win_amd64.whl", hash = "sha256:27422aa5f11fbcd9b18da48373eb67081243662f9b46e6fd07c3eb46e4535142", size = 2569224, upload-time = "2025-01-04T20:09:19.234Z" },
+]
+
 [[package]]
 name = "pyasn1"
 version = "0.6.1"
@@ -548,6 +579,7 @@ dependencies = [
     { name = "graphiti-core", extra = ["google-genai"] },
     { name = "httpx" },
     { name = "loguru" },
+    { name = "psycopg2-binary" },
     { name = "pydantic" },
     { name = "python-dotenv" },
     { name = "redis" },
@@ -560,6 +592,7 @@ requires-dist = [
     { name = "graphiti-core", extras = ["google-genai"], specifier = ">=0.18.9" },
     { name = "httpx", specifier = ">=0.28.1" },
     { name = "loguru", specifier = ">=0.7.3" },
+    { name = "psycopg2-binary", specifier = ">=2.9.10" },
     { name = "pydantic", specifier = ">=2.11.7" },
     { name = "python-dotenv", specifier = ">=1.1.1" },
     { name = "redis", specifier = ">=6.4.0" },
